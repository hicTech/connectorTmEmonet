/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hl7jsonconverter;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;

/**
 *
 * @author Francesco
 */
public class HL7JSONConverterGui extends javax.swing.JFrame {
    final JFileChooser fc;
    /**
     * Creates new form HL7JSONConverterGui
     */
    public HL7JSONConverterGui() {
        initComponents();
        fc = new JFileChooser();
        this.pack();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        openFileButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        portTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaResponse = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HL7 JSON Converter");

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("JSON Message"));

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setToolTipText("Insert JSON Message Here");
        jScrollPane1.setViewportView(textArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        openFileButton.setText("Open JSON File...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        portTextField.setColumns(7);
        portTextField.setText("6661");

        jLabel1.setText("port:");

        jLabel2.setText("Address:");

        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("JSON Response"));

        textAreaResponse.setEditable(false);
        textAreaResponse.setColumns(20);
        textAreaResponse.setRows(5);
        textAreaResponse.setToolTipText("");
        jScrollPane2.setViewportView(textAreaResponse);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openFileButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(sendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openFileButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        JSONObject jsonObject;
        if (textArea.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Messaggio vuoto", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            jsonObject = new JSONObject(textArea.getText());
        } catch (JSONException jex) {
            JOptionPane.showMessageDialog(null, "Il file dev'essere in formato JSON", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (addressTextField.getText().isEmpty() || portTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "I campi address e port devono essere compilati", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (Character c : portTextField.getText().toCharArray()) {
            if (!Character.isDigit(c)) {
                JOptionPane.showMessageDialog(null, "Campo port non valido", "Errore", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        try {
            try (Socket sender = new Socket(addressTextField.getText(), Integer.parseInt(portTextField.getText()))) {
                DataOutputStream outToServer = new DataOutputStream(sender.getOutputStream());
                outToServer.writeBytes(XML.toString(jsonObject));
                
            }
        } catch (IOException ex) {
            Logger.getLogger(HL7JSONConverterGui.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }//GEN-LAST:event_sendButtonActionPerformed

    public void setResponse(String s) {
        textAreaResponse.setText(s);
    }
    
    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        int returnVal = fc.showOpenDialog(HL7JSONConverterGui.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                String content = new String(Files.readAllBytes(file.toPath()));
                JSONObject jsonObject = new JSONObject(content);
                textArea.setText(content);
            } catch (IOException ex) {
                Logger.getLogger(HL7JSONConverterGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException jex) {
                JOptionPane.showMessageDialog(null, "Il file dev'essere in formato JSON", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        } 
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        final HL7JSONConverterGui hL7JSONConverterGui = new HL7JSONConverterGui();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                hL7JSONConverterGui.setVisible(true);
            }
        });
        
        new Thread(new Runnable() {

            @Override
            public void run() {
                //keep listens indefinitely until receives 'exit' call or program terminates
                try (ServerSocket server = new ServerSocket(6660)) {
                    //keep listens indefinitely until receives 'exit' call or program terminates
                    while(true){
                        System.out.println("Waiting for client request");
                        //creating socket and waiting for client connection
                        Socket socket = server.accept();
                        //read from socket to ObjectInputStream object
                        BufferedReader ois = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        //convert ObjectInputStream object to String
                        String message = (String) ois.readLine();
                        hL7JSONConverterGui.setResponse(XML.toJSONObject(message).toString(4));
                        //close resources
                        ois.close();
                        socket.close();
                        //terminate the server if client sends exit request
                        if(message.equalsIgnoreCase("exit")) break;
                    }
                    System.out.println("Shutting down Socket server!!");
                    //close the ServerSocket object
                } catch (IOException ex) {
                    Logger.getLogger(HL7JSONConverterGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTextField;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openFileButton;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextArea textAreaResponse;
    // End of variables declaration//GEN-END:variables
}
